{
    "cuda_code" : "binomial.cuh\n__global__ void binomialOptionsKernel(void)\n {\n     __shared__ double call_exchange[128 + 1];\n     const int     tid = threadIdx.x;\n     const double      S = 0.0;\n     const double     X = 0.0;\n     const double    vDt = 0.0;\n     const double puByDf = 0.0;\n     const double pdByDf = 0.0;\n \n     double call[16 + 1];\n     #pragma unroll\n     for (int i = 0; i < 16; ++i)\n         call[i] = (S * exp(vDt * (2.0 * i - 2048)) - X) > 0.0 ? S * exp(vDt * (2.0 * i - 2048)) - X : 0.0;\n \n     if (tid == 0)\n         call_exchange[128] = (S * exp(vDt * (2.0 * 2048 - 2048)) - X) > 0.0 ? S * exp(vDt * (2.0 * 2048 - 2048)) - X : 0.0;\n \n     int final_it = max(0, tid * 16 - 1);\n \n     _Pragma(\"unroll 16\")\n     for (int i = 2048; i > 0; --i)\n     {\n         call_exchange[tid] = call[0];\n         __syncthreads();\n         call[16] = call_exchange[tid + 1];\n         __syncthreads();\n \n         if (i > final_it)\n         {\n            // #pragma unroll\n            for(int j = 0; j < 16; ++j)\n               call[j] = puByDf * call[j + 1] + pdByDf * call[j];\n         }\n     }\n }\n",
    "block_per_grid" : [1024, 1, 1],
    "threads_per_block" : [128, 1, 1],
    "call" : {
        "func_name" : "binomialOptionsKernel", 
        "args" : []
    }
}
